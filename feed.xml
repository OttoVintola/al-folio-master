<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ottovintola.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ottovintola.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-02-26T15:58:33+00:00</updated><id>https://ottovintola.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Advanced SQL and Query Optimization</title><link href="https://ottovintola.github.io/blog/2024/Advanced-SQL/" rel="alternate" type="text/html" title="Advanced SQL and Query Optimization"/><published>2024-02-26T11:12:00+00:00</published><updated>2024-02-26T11:12:00+00:00</updated><id>https://ottovintola.github.io/blog/2024/Advanced%20SQL</id><content type="html" xml:base="https://ottovintola.github.io/blog/2024/Advanced-SQL/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Recently, I’ve been studying SQL for some data engineering tasks. I came across a course that mentioned about using Arrays – which I did not even know existed in SQL, additionally, there were ideas and best practices about how to make queries more efficient. I knew that most database systems have <strong>query optimizers</strong> that attempt to interpret/execute the query efficiently, but there were some strategies that could still make a massive impact on the performance of the query.</p> <p><br/></p> <h2 id="nested-data">Nested Data</h2> <p>Lets imagine a hypothetical dataset that has the information about people and their jobs. The data is stored in two tables called <code class="language-plaintext highlighter-rouge">Employees</code> and the columns are <code class="language-plaintext highlighter-rouge">ID</code>, <code class="language-plaintext highlighter-rouge">Name</code>, <code class="language-plaintext highlighter-rouge">Age</code>, and then there is another table called <code class="language-plaintext highlighter-rouge">Information</code> with columns <code class="language-plaintext highlighter-rouge">JobID</code>, <code class="language-plaintext highlighter-rouge">Job</code> and <code class="language-plaintext highlighter-rouge">Tasks</code>. The <code class="language-plaintext highlighter-rouge">JobID</code> is a foreign key that references the <code class="language-plaintext highlighter-rouge">ID</code> in the <code class="language-plaintext highlighter-rouge">people</code> table.</p> <p><strong>Employees Table</strong></p> <table> <thead> <tr> <th style="text-align: left">ID</th> <th style="text-align: left">Name</th> <th style="text-align: left">Age</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">101</td> <td style="text-align: left">John</td> <td style="text-align: left">45</td> </tr> <tr> <td style="text-align: left">42</td> <td style="text-align: left">Jack</td> <td style="text-align: left">35</td> </tr> <tr> <td style="text-align: left">89</td> <td style="text-align: left">Jill</td> <td style="text-align: left">58</td> </tr> </tbody> </table> <p><br/></p> <p><strong>Information Table</strong></p> <table> <thead> <tr> <th style="text-align: left">JobID</th> <th style="text-align: left">Job</th> <th style="text-align: left">Tasks</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">89</td> <td style="text-align: left">Software</td> <td style="text-align: left">Coding</td> </tr> <tr> <td style="text-align: left">42</td> <td style="text-align: left">Sales</td> <td style="text-align: left">Negotiating</td> </tr> <tr> <td style="text-align: left">101</td> <td style="text-align: left">Legal</td> <td style="text-align: left">Advise</td> </tr> </tbody> </table> <p><br/></p> <p>We can either construct the tables like this, or we can use a nested column (a row inside of a row) to store the information. You can think of the row entry being used as a reference to more rows. The nested data structure would look like this:</p> <p><strong>Employees_Information</strong></p> <table> <thead> <tr> <th style="text-align: left">ID</th> <th style="text-align: left">Name</th> <th style="text-align: left">Age</th> <th style="text-align: left">Jobs</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">101</td> <td style="text-align: left">John</td> <td style="text-align: left">45</td> <td style="text-align: left">{Job: Legal, Tasks: Advise}</td> </tr> <tr> <td style="text-align: left">42</td> <td style="text-align: left">Jack</td> <td style="text-align: left">35</td> <td style="text-align: left">{Job: Sales, Tasks: Negotiating}</td> </tr> <tr> <td style="text-align: left">89</td> <td style="text-align: left">Jill</td> <td style="text-align: left">58</td> <td style="text-align: left">{Job: Software, Tasks: Coding}</td> </tr> </tbody> </table> <p><br/> The nested data structure is more efficient because it reduces the number of joins that need to be performed. Additionally, it reduces the database schema complexity making it easier to understand and maintain.</p> <p>To extract the data from this nested structure, we can use a query like this:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">ID</span><span class="p">,</span> <span class="n">Name</span><span class="p">,</span> <span class="n">Age</span>
<span class="k">FROM</span> <span class="n">Employees_Information</span><span class="p">,</span>
    <span class="n">Jobs</span><span class="p">.</span><span class="n">Job</span> <span class="k">AS</span> <span class="n">Job</span><span class="p">,</span> <span class="n">Jobs</span><span class="p">.</span><span class="n">Tasks</span> <span class="k">AS</span> <span class="n">Task</span>
</code></pre></div></div> <p>Which would result in a table like this:</p> <table> <thead> <tr> <th style="text-align: left">ID</th> <th style="text-align: left">Name</th> <th style="text-align: left">Age</th> <th style="text-align: left">Job</th> <th style="text-align: left">Task</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">101</td> <td style="text-align: left">John</td> <td style="text-align: left">45</td> <td style="text-align: left">Legal</td> <td style="text-align: left">Advise</td> </tr> <tr> <td style="text-align: left">42</td> <td style="text-align: left">Jack</td> <td style="text-align: left">35</td> <td style="text-align: left">Sales</td> <td style="text-align: left">Negotiating</td> </tr> <tr> <td style="text-align: left">89</td> <td style="text-align: left">Jill</td> <td style="text-align: left">58</td> <td style="text-align: left">Software</td> <td style="text-align: left">Coding</td> </tr> </tbody> </table> <p><br/></p> <h2 id="repeated-data">Repeated Data</h2> <p>Another a more realistic scenario is when we can have multiple tasks per job. In this scenario we can use an <code class="language-plaintext highlighter-rouge">Array</code> to store the tasks. The <code class="language-plaintext highlighter-rouge">Employees</code> table would look like this:</p> <p><strong>Employees_Information</strong></p> <table> <thead> <tr> <th style="text-align: left">ID</th> <th style="text-align: left">Name</th> <th style="text-align: left">Age</th> <th style="text-align: left">Job</th> <th style="text-align: left">Tasks</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">101</td> <td style="text-align: left">John</td> <td style="text-align: left">45</td> <td style="text-align: left">Legal</td> <td style="text-align: left">[Advise, Research]</td> </tr> <tr> <td style="text-align: left">42</td> <td style="text-align: left">Jack</td> <td style="text-align: left">35</td> <td style="text-align: left">Sales</td> <td style="text-align: left">[Negotiating, Marketing]</td> </tr> <tr> <td style="text-align: left">89</td> <td style="text-align: left">Jill</td> <td style="text-align: left">58</td> <td style="text-align: left">Software</td> <td style="text-align: left">[Coding, Testing]</td> </tr> </tbody> </table> <p><br/> To extract the data from this array structure, we can use a query like this:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">ID</span><span class="p">,</span> <span class="n">Name</span><span class="p">,</span> <span class="n">Age</span><span class="p">,</span> <span class="n">Job</span><span class="p">,</span> <span class="n">Task</span>
<span class="k">FROM</span> <span class="n">Employees_Information</span><span class="p">,</span>
    <span class="k">UNNEST</span><span class="p">(</span><span class="n">Tasks</span><span class="p">)</span> <span class="k">AS</span> <span class="n">Task</span>
</code></pre></div></div> <p>From this query we would get a table like this:</p> <table> <thead> <tr> <th style="text-align: left">ID</th> <th style="text-align: left">Name</th> <th style="text-align: left">Age</th> <th style="text-align: left">Job</th> <th style="text-align: left">Task</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">101</td> <td style="text-align: left">John</td> <td style="text-align: left">45</td> <td style="text-align: left">Legal</td> <td style="text-align: left">Advise</td> </tr> <tr> <td style="text-align: left">101</td> <td style="text-align: left">John</td> <td style="text-align: left">45</td> <td style="text-align: left">Legal</td> <td style="text-align: left">Research</td> </tr> <tr> <td style="text-align: left">42</td> <td style="text-align: left">Jack</td> <td style="text-align: left">35</td> <td style="text-align: left">Sales</td> <td style="text-align: left">Negotiating</td> </tr> <tr> <td style="text-align: left">42</td> <td style="text-align: left">Jack</td> <td style="text-align: left">35</td> <td style="text-align: left">Sales</td> <td style="text-align: left">Marketing</td> </tr> <tr> <td style="text-align: left">89</td> <td style="text-align: left">Jill</td> <td style="text-align: left">58</td> <td style="text-align: left">Software</td> <td style="text-align: left">Coding</td> </tr> <tr> <td style="text-align: left">89</td> <td style="text-align: left">Jill</td> <td style="text-align: left">58</td> <td style="text-align: left">Software</td> <td style="text-align: left">Testing</td> </tr> </tbody> </table> <p><br/> Note the difference thus between using a nested structure and arrays!</p> <p>It is also possible to have nested structures within arrays, and arrays within nested structures. This can be useful for storing complex data structures in a single column.</p> <p><br/></p> <h2 id="query-optimization">Query Optimization</h2> <p>The three main strategies for optimizing queries that I recently learned are</p> <ol> <li>Only select columns needed/wanted</li> <li>Read less data</li> <li>Avoid N:N Joins</li> </ol> <p><br/></p> <h4 id="1-only-select-columns-neededwanted">1. Only select columns needed/wanted</h4> <p>Usually it is tempting to just get everything with <code class="language-plaintext highlighter-rouge">SELECT * FROM ...</code> but this is not efficient if all of the columns are not required for the query/results. To highlight the difference consider these two following queries ran on the <a href="https://cloud.google.com/bigquery/public-data"><code class="language-plaintext highlighter-rouge">bigquery-public-data.github_repos.contents</code></a> table:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="nv">`bigquery-public-data.github_repos.contents
</span></code></pre></div></div> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">size</span><span class="p">,</span> <span class="nb">binary</span> <span class="k">FROM</span> <span class="nv">`bigquery-public-data.github_repos.contents
</span></code></pre></div></div> <p>Data processed: 2682.118 GB <br/> Data processed: 2.531 GB</p> <p><br/></p> <h4 id="2-read-less-data">2. Read less data</h4> <p>This point seems obvious, however, it might not be as straightforward as it seems. The idea is to be parsimonius about what columns to include in the query. Avoid as hard as you can to include columns that are not needed. Well, how can you do that? If there is a column with a 1-to-1 relationship with another column, then you can exclude one of them and use the other. For example, if you have a column <code class="language-plaintext highlighter-rouge">Country</code> and another column <code class="language-plaintext highlighter-rouge">CountryCode</code> you can exclude one of them and this will effectively reduce the amount of data read.</p> <p>Consider the query below:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">Country</span><span class="p">,</span> <span class="n">Population</span><span class="p">,</span> <span class="n">GDP</span><span class="p">,</span> <span class="n">CountryCode</span>
<span class="k">FROM</span> <span class="n">CountryTable</span>
<span class="k">WHERE</span> <span class="n">CountryCode</span> <span class="o">=</span> <span class="s1">'US'</span>
</code></pre></div></div> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">Country</span><span class="p">,</span> <span class="n">Population</span><span class="p">,</span> <span class="n">GDP</span>
<span class="k">FROM</span> <span class="n">CountryTable</span>
<span class="k">WHERE</span> <span class="n">Country</span> <span class="o">=</span> <span class="s1">'United States'</span>
</code></pre></div></div> <p>Since, the <code class="language-plaintext highlighter-rouge">CountryCode</code> and <code class="language-plaintext highlighter-rouge">Country</code> have a 1-to-1 correspondence, we can exclude one of them and use the other.</p> <p><br/></p> <h4 id="3-avoid-nn-joins">3. Avoid N:N Joins</h4> <p>The idea here is to avoid joining tables that have a many-to-many relationship and instead separate the queries if possible, and then use an <code class="language-plaintext highlighter-rouge">INNER JOIN</code> to combine the results.</p> <p>The query ran on the <code class="language-plaintext highlighter-rouge">bigquery-public-data.github_repos</code> below shows the difference</p> <p>Slow</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                 <span class="k">SELECT</span> <span class="n">repo</span><span class="p">,</span>
                     <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="k">c</span><span class="p">.</span><span class="n">committer</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="k">as</span> <span class="n">num_committers</span><span class="p">,</span>
                     <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">f</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">num_files</span>
                 <span class="k">FROM</span> <span class="nv">`bigquery-public-data.github_repos.commits`</span> <span class="k">AS</span> <span class="k">c</span><span class="p">,</span>
                     <span class="k">UNNEST</span><span class="p">(</span><span class="k">c</span><span class="p">.</span><span class="n">repo_name</span><span class="p">)</span> <span class="k">AS</span> <span class="n">repo</span>
                 <span class="k">INNER</span> <span class="k">JOIN</span> <span class="nv">`bigquery-public-data.github_repos.files`</span> <span class="k">AS</span> <span class="n">f</span>
                     <span class="k">ON</span> <span class="n">f</span><span class="p">.</span><span class="n">repo_name</span> <span class="o">=</span> <span class="n">repo</span>
                 <span class="k">WHERE</span> <span class="n">f</span><span class="p">.</span><span class="n">repo_name</span> <span class="k">IN</span> <span class="p">(</span> <span class="s1">'tensorflow/tensorflow'</span><span class="p">,</span> <span class="s1">'facebook/react'</span><span class="p">,</span> <span class="s1">'twbs/bootstrap'</span><span class="p">,</span> <span class="s1">'apple/swift'</span><span class="p">,</span> <span class="s1">'Microsoft/vscode'</span><span class="p">,</span> <span class="s1">'torvalds/linux'</span><span class="p">)</span>
                 <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">repo</span>
                 <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">repo</span>             
</code></pre></div></div> <p>Fast</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>             <span class="k">WITH</span> <span class="n">commits</span> <span class="k">AS</span>
                   <span class="p">(</span>
                   <span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">committer</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="k">AS</span> <span class="n">num_committers</span><span class="p">,</span> <span class="n">repo</span>
                   <span class="k">FROM</span> <span class="nv">`bigquery-public-data.github_repos.commits`</span><span class="p">,</span>
                       <span class="k">UNNEST</span><span class="p">(</span><span class="n">repo_name</span><span class="p">)</span> <span class="k">as</span> <span class="n">repo</span>
                   <span class="k">WHERE</span> <span class="n">repo</span> <span class="k">IN</span> <span class="p">(</span> <span class="s1">'tensorflow/tensorflow'</span><span class="p">,</span> <span class="s1">'facebook/react'</span><span class="p">,</span> <span class="s1">'twbs/bootstrap'</span><span class="p">,</span> <span class="s1">'apple/swift'</span><span class="p">,</span> <span class="s1">'Microsoft/vscode'</span><span class="p">,</span> <span class="s1">'torvalds/linux'</span><span class="p">)</span>
                   <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">repo</span>
                   <span class="p">),</span>
                   <span class="n">files</span> <span class="k">AS</span> 
                   <span class="p">(</span>
                   <span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">num_files</span><span class="p">,</span> <span class="n">repo_name</span> <span class="k">as</span> <span class="n">repo</span>
                   <span class="k">FROM</span> <span class="nv">`bigquery-public-data.github_repos.files`</span>
                   <span class="k">WHERE</span> <span class="n">repo_name</span> <span class="k">IN</span> <span class="p">(</span> <span class="s1">'tensorflow/tensorflow'</span><span class="p">,</span> <span class="s1">'facebook/react'</span><span class="p">,</span> <span class="s1">'twbs/bootstrap'</span><span class="p">,</span> <span class="s1">'apple/swift'</span><span class="p">,</span> <span class="s1">'Microsoft/vscode'</span><span class="p">,</span> <span class="s1">'torvalds/linux'</span><span class="p">)</span>
                   <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">repo</span>
                   <span class="p">)</span>
                   <span class="k">SELECT</span> <span class="n">commits</span><span class="p">.</span><span class="n">repo</span><span class="p">,</span> <span class="n">commits</span><span class="p">.</span><span class="n">num_committers</span><span class="p">,</span> <span class="n">files</span><span class="p">.</span><span class="n">num_files</span>
                   <span class="k">FROM</span> <span class="n">commits</span> 
                   <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">files</span>
                       <span class="k">ON</span> <span class="n">commits</span><span class="p">.</span><span class="n">repo</span> <span class="o">=</span> <span class="n">files</span><span class="p">.</span><span class="n">repo</span>
                   <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">repo</span>      
                   
</code></pre></div></div> <p>The time difference is not significant for this particular query, but if we run it again and again, the difference will add up.</p> <p>Time to run: 13.028 seconds <br/> Time to run: 4.413 seconds <br/><br/></p> <h2 id="conclusion">Conclusion</h2> <p>When I was first learning about SQL, it was in PostgreSQL, which famously does not have arrays built in, so I was quite surprised that they actually exist. Additionally, the idea of nesting data seems logical in order to keep the database schemas more simple – having to do a myriad of <code class="language-plaintext highlighter-rouge">JOIN</code> statements can make queries complex. Lastly, it is also important to track the performance of queries, especially if they are ran on a frequent bases, and attempt to optimize with these principles or just common sense. <br/> <br/> <br/> <br/></p> <h2 id="references">References</h2> <ol> <li><a href="https://www.kaggle.com/learn/advanced-sql">Advanced SQL</a> by Alexis Cook on Kaggle</li> </ol>]]></content><author><name></name></author><category term="Databases"/><category term="SQL"/><category term="Sustainability"/><summary type="html"><![CDATA[What I learned about SQL and making queries run faster and more sustainably than before]]></summary></entry><entry><title type="html">a distill-style blog post</title><link href="https://ottovintola.github.io/blog/2021/distill/" rel="alternate" type="text/html" title="a distill-style blog post"/><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://ottovintola.github.io/blog/2021/distill</id><content type="html" xml:base="https://ottovintola.github.io/blog/2021/distill/"><![CDATA[<h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <hr/> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags. An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>. For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p> <d-code block="" language="javascript"> var x = 25; function(x) { return x * x; } </d-code> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode. You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
<span class="k">return</span> <span class="nx">x</span> <span class="err">\</span><span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="interactive-plots">Interactive Plots</h2> <p>You can add interative plots using plotly + iframes :framed_picture:</p> <div class="l-page"> <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <p>The plot must be generated separately and saved into an HTML file. To generate the plot that you see above, you can use the following code snippet:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
<span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
<span class="n">df</span><span class="p">,</span>
<span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
<span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
<span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
<span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">assets/plotly/demo.html</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <hr/> <h2 id="details-boxes">Details boxes</h2> <p>Details boxes are collapsible boxes which hide additional information from the user. They can be added with the <code class="language-plaintext highlighter-rouge">details</code> liquid tag:</p> <details><summary>Click here to know more</summary> <p>Additional details, where math \(2x - 1\) and <code class="language-plaintext highlighter-rouge">code</code> is rendered correctly.</p> </details> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li> <p>Unordered list can use asterisks</p> </li> <li> <p>Or minuses</p> </li> <li> <p>Or pluses</p> </li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><category term="distill"/><category term="formatting"/><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry></feed>